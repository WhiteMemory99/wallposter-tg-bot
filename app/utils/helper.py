from typing import Tuple

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from app.models import User
from app.services.scheduler import apscheduler


POSITIVE = '‚úÖ'
NEGATIVE = 'üî¥'


def get_settings_data(user: User) -> Tuple[str, InlineKeyboardMarkup]:
    """
    Get an inline keyboard object of the settings.

    :param user: User object from the database
    :return: Returns text and InlineKeyboardMarkup
    """
    job_id = f'posting_{user.id}'
    job = apscheduler.get_job(job_id)
    scheduler_status = POSITIVE if job is not None else NEGATIVE
    title_status = POSITIVE if user.enable_sign else NEGATIVE
    counter_status = POSITIVE if user.enable_counter else NEGATIVE

    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫', callback_data='info'),
        InlineKeyboardButton(scheduler_status, callback_data='schedule_switch'),
        InlineKeyboardButton('–°—á—ë—Ç—á–∏–∫ –æ–±–æ–µ–≤', callback_data='info'),
        InlineKeyboardButton(counter_status, callback_data='counter_switch'),
        InlineKeyboardButton('–ü–æ–¥–ø–∏—Å—å', callback_data='info'),
        InlineKeyboardButton(title_status, callback_data='title_switch')
    )

    if job is not None:
        markup.row(InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª', callback_data='schedule_edit'))
    if user.enable_counter:
        markup.row(InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—á—ë—Ç—á–∏–∫', callback_data='counter_edit'))
    if user.enable_sign:
        markup.row(InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å', callback_data='title_edit'))

    channel = user.chat_id if user.chat_id else '–ù–µ—Ç'
    interval_text = get_interval_text(user.scheduler_hours)
    text = f'<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.</b>\n–ö–∞–Ω–∞–ª: <code>{channel}</code>\n' \
           f'–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: <b>{interval_text}</b>\n–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç—á–∏–∫: <b>{user.counter}</b>'

    return text, markup


def get_interval_text(number: int) -> str:
    """
    Get the scheduler interval text based on its number.

    :param number: Scheduler interval hours
    :return:
    """
    if number in [1, 21]:
        text = f'{number} —á–∞—Å'
    elif number in [2, 3, 4, 22, 23, 24]:
        text = f'{number} —á–∞—Å–∞'
    else:
        text = f'{number} —á–∞—Å–æ–≤'

    return text
